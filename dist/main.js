"use strict";(self.webpackChunkbattleships=self.webpackChunkbattleships||[]).push([[590],{864:()=>{class t{constructor(t,i=0,e=!1){this.length=t,this.hits=i,this.sunk=e}hit(){return this.hits++,this.isSunk(),this}isSunk(){return this.hits===this.length&&(this.sunk=!0),this}}function i(t){for(let i=0;i<=9;i++)for(let e=0;e<=9;e++)gridDiv=document.createElement(div),gridDiv.classList=`${i}${e}`,t.appendChild(gridDiv)}(()=>{const i=Array.from({length:10},(()=>Array(10).fill(null))),e=Array.from({length:10},(()=>Array(10).fill(null))),s=[];return{board:i,missed:e,positionShips:function(e){if(null!==e)for(position of e){let e;const[n,r,o,l]=position;if(n===r&&o===l)e=new t(1),i[o][n]=e;else if(n===r){const s=l-o+1;e=new t(s);for(let t=0;t<s;t++)i[o+t][n]=e}else{if(o!==l)throw Error;{const s=r-n+1;e=new t(s);for(let t=0;t<s;t++)i[o][n+t]=e}}s.push(e)}else console.log("Need to provide coordinates")},recieveAttack:function([t,s]){null!=i[s][t]?i[s][t].hit():e[s][t]="X"},allShipsSunk:function(){return s.every((t=>!0===t.sunk))},ships:s}})().positionShips([[0,0,0,2],[7,7,0,0],[2,4,2,2],[6,7,2,2],[0,1,6,6],[3,3,5,6],[3,3,8,8],[5,5,5,8],[7,7,7,7],[9,9,7,7]]);const e=document.querySelector(".player-grid"),s=document.querySelector(".computer-grid");i(e),i(s)}},t=>{t(t.s=864)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,