"use strict";(self.webpackChunkbattleships=self.webpackChunkbattleships||[]).push([[792],{365:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),i=t.n(r),a=t(314),o=t.n(a)()(i());o.push([n.id,'body {\n    user-select: none;\n}\n\n.player1-grid.number, .player2-grid.number, .computer-grid.number {\n    background-color: white;\n    color: black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.centered-container {\n    display: flex;\n    flex-direction: column;\n    height: 100%; /* Adjust as needed */\n    background-color: rgb(255, 255, 255);\n}\n\n#gameEndingOverlay {\n    display: none;\n    background-color: lightblue;\n    flex-direction: column;\n    height: auto;\n\n}\n\n.reset-btn-div {\n    text-align: center;\n    padding: 16px;\n}\n\n.welcome-title {\n    display: flex;\n    flex: 4;\n    justify-content: center;\n    align-items: flex-end;\n}\n\n.player-selection {\n    display: flex;\n    justify-content: center;\n    gap: 2em;\n    background-color: rgb(255, 255, 255);\n    /* height: 100%; */\n    width: 100%;\n    flex: 5;\n    align-items: flex-start;\n}\n\n.player-selection-container {\n    display: flex;\n    gap: 1em;\n    flex-direction: column;\n}\n\n.player-2-btn-container, .computer-btn-container {\n    display: flex;\n    justify-content: center;\n}\n\n#hit, #revealedMiss {\n    background-color: #bbb2b279;\n}\n\n#revealedMiss {\n    color: rgb(118, 115, 115);\n}\n\n.player1-grid.number.ship-present, .player2-grid.number.ship-present, .computer-grid.number.ship-present {\n    color: red;\n}\n\n/* SHIP PLACING */\ndiv.player1-grid.number.highlight, div.player2-grid.number.highlight, div.computer-grid.number.highlight {\n    /* CHOSE BORDER AS IT IS EASIER TO SEE WHEN PLACING */\n    border: 2px solid rgb(38, 209, 38);\n}\n\ndiv.player1-grid.number.not-valid, div.player2-grid.number.not-valid {\n    /* APPLYING BORDER ALLOWS USER TO DETERMINE WHAT IS BEHIND THE CURSOR\n    NECESSARY TO REDUCE WIDTH AND HEIGHT BY BORDER FOR NO BUGS */\n    border: 2px solid red;\n    width: 28px;\n    height: 28px;\n}\n\n.shaking-animation {\n    animation-name: shakeAnimation;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n}\n\n@keyframes shakeAnimation {\n    0% { transform: translateX(0); }\n    15% { transform: translateX(-5px); }\n    30% { transform: translateX(5px); }\n    45% { transform: translateX(-5px); }\n    60% { transform: translateX(5px); }\n    75% { transform: translateX(-5px); }\n    100% { transform: translateX(0); }\n  }\n\n\n/* DRAGGABLE SHIPS */\n.ship-container-1, .ship-container-2, .ship-container-3 {\n    display: grid;\n    align-items: end;\n}\n\n.ships-container {\n    display: flex;\n    gap: 1em;\n    grid-area: 1 / 1 / -2 / 1;\n    padding: 1em;\n}\n\n.draggable-ship[data-size="1"], .draggable-ship.vertical[data-size="1"] {\n    width: 32px;\n    height: 32px;\n    outline: 2px solid darkblue;\n    position: relative;\n}\n\n.draggable-ship[data-size="2"] {\n    width: 32px;\n    height: 64px;\n    outline: 2px solid darkblue;\n    position: relative;\n}\n\n.draggable-ship.vertical[data-size="2"] {\n    width: 64px;\n    height: 32px;\n    outline: 2px solid darkblue;\n    position: relative;\n}\n\n.draggable-ship[data-size="3"] {\n    width: 32px;\n    height: 96px;\n    outline: 2px solid darkblue;\n    position: relative;\n}\n\n.draggable-ship.vertical[data-size="3"] {\n    width: 96px;\n    height: 32px;\n    outline: 2px solid darkblue;\n    position: relative;\n}\n\n.draggable-ship[data-size="4"] {\n    width: 32px;\n    height: 128px;\n    outline: 2px solid darkblue;\n    position: relative;\n}\n\n.draggable-ship.vertical[data-size="4"] {\n    width: 128px;\n    height: 32px;\n    outline: 2px solid darkblue;\n    position: relative;\n}\n\nh3.title {\n    grid-area: 1 / 2;\n}\n\n#player1Grid, #player2Grid, #computerGrid {\n    display: grid;\n    grid-template-columns: repeat(10, 32px);\n    grid-template-rows: repeat(10, 32px);\n    grid-gap: 2px;\n    background-color: lightblue;\n    border: 2px solid lightblue;\n\n    grid-area: 2 / 2;\n    height: max-content;\n    \n}\n\n#player1GridOverlay, #player2GridOverlay, #computerGridOverlay {\n    padding-left: 1em;\n    padding-right: 1em;\n    color: rgb(237, 233, 233);\n}\n\n.grid-containers {\n    display: flex;\n    gap: 2em;\n    justify-content: space-evenly;\n}\n\nh1 {\n    text-align: center;\n}\n\n/* ONLY colour player grid */\n.ship-present.reveal {\n    outline: 2px solid darkblue;\n    width: 100%;\n    height: 100%;\n}\n\n.start-button-container{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 32px;\n}\n\n.start-button, .reset-btn, .randomise-btn, .confirm-btn, .horizontal-or-vertical-btn {\n    font-size: large;\n    padding: 4px 8px;\n}\n\n.horizontal-or-vertical-btn {\n    min-width: 134.67px\n}\n\nh3 {\n    text-align: center;\n}\n\n/* GRID CONTAINERS */\n.player1-grid-container, .player2-grid-container, .computer-grid-container {\n    position: relative;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: auto 1fr auto;\n    gap: 1em;\n\n    padding-right: 1em; /* Keeps the athestetic with the overlay even */\n}\n\n.btn-container {\n    display: flex;\n    justify-content: space-between;\n    grid-area: 3 / 1 / 3 / -1;\n}\n\n.grid-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black overlay */\n    display: none; /* Initially hidden */\n}\n\n.ship-present.reveal.sunk {\n    outline: 2px solid red;\n    width: 100%;\n    height: 100%;\n}\n\n.draggable-ship.sunk {\n    outline: 2px solid red;\n}\n\n.draggable-ship.placing {\n    outline: 2px solid rgb(38, 209, 38);\n}\n\n.draggable-ship.invisible {\n    outline: 2px solid white;\n}\n\n\n/* COLOURS FOR SPAN\'S IN TURN TEXT */\n/* HIT */\n.highlighted.red {\n    color: lightcoral;\n}\n\n/* SUNK */\n.highlighted.orange {\n    color: orange;\n}\n\n/* MISSED */\n.highlighted.blue {\n    color: lightskyblue;\n}\n\n/* PLACING */\n.highlighted.green {\n    color: rgb(38, 209, 38);\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:['body {\r\n    user-select: none;\r\n}\r\n\r\n.player1-grid.number, .player2-grid.number, .computer-grid.number {\r\n    background-color: white;\r\n    color: black;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.centered-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%; /* Adjust as needed */\r\n    background-color: rgb(255, 255, 255);\r\n}\r\n\r\n#gameEndingOverlay {\r\n    display: none;\r\n    background-color: lightblue;\r\n    flex-direction: column;\r\n    height: auto;\r\n\r\n}\r\n\r\n.reset-btn-div {\r\n    text-align: center;\r\n    padding: 16px;\r\n}\r\n\r\n.welcome-title {\r\n    display: flex;\r\n    flex: 4;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n}\r\n\r\n.player-selection {\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 2em;\r\n    background-color: rgb(255, 255, 255);\r\n    /* height: 100%; */\r\n    width: 100%;\r\n    flex: 5;\r\n    align-items: flex-start;\r\n}\r\n\r\n.player-selection-container {\r\n    display: flex;\r\n    gap: 1em;\r\n    flex-direction: column;\r\n}\r\n\r\n.player-2-btn-container, .computer-btn-container {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n#hit, #revealedMiss {\r\n    background-color: #bbb2b279;\r\n}\r\n\r\n#revealedMiss {\r\n    color: rgb(118, 115, 115);\r\n}\r\n\r\n.player1-grid.number.ship-present, .player2-grid.number.ship-present, .computer-grid.number.ship-present {\r\n    color: red;\r\n}\r\n\r\n/* SHIP PLACING */\r\ndiv.player1-grid.number.highlight, div.player2-grid.number.highlight, div.computer-grid.number.highlight {\r\n    /* CHOSE BORDER AS IT IS EASIER TO SEE WHEN PLACING */\r\n    border: 2px solid rgb(38, 209, 38);\r\n}\r\n\r\ndiv.player1-grid.number.not-valid, div.player2-grid.number.not-valid {\r\n    /* APPLYING BORDER ALLOWS USER TO DETERMINE WHAT IS BEHIND THE CURSOR\r\n    NECESSARY TO REDUCE WIDTH AND HEIGHT BY BORDER FOR NO BUGS */\r\n    border: 2px solid red;\r\n    width: 28px;\r\n    height: 28px;\r\n}\r\n\r\n.shaking-animation {\r\n    animation-name: shakeAnimation;\r\n    animation-duration: 0.25s;\r\n    animation-iteration-count: 1;\r\n}\r\n\r\n@keyframes shakeAnimation {\r\n    0% { transform: translateX(0); }\r\n    15% { transform: translateX(-5px); }\r\n    30% { transform: translateX(5px); }\r\n    45% { transform: translateX(-5px); }\r\n    60% { transform: translateX(5px); }\r\n    75% { transform: translateX(-5px); }\r\n    100% { transform: translateX(0); }\r\n  }\r\n\r\n\r\n/* DRAGGABLE SHIPS */\r\n.ship-container-1, .ship-container-2, .ship-container-3 {\r\n    display: grid;\r\n    align-items: end;\r\n}\r\n\r\n.ships-container {\r\n    display: flex;\r\n    gap: 1em;\r\n    grid-area: 1 / 1 / -2 / 1;\r\n    padding: 1em;\r\n}\r\n\r\n.draggable-ship[data-size="1"], .draggable-ship.vertical[data-size="1"] {\r\n    width: 32px;\r\n    height: 32px;\r\n    outline: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\n.draggable-ship[data-size="2"] {\r\n    width: 32px;\r\n    height: 64px;\r\n    outline: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\n.draggable-ship.vertical[data-size="2"] {\r\n    width: 64px;\r\n    height: 32px;\r\n    outline: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\n.draggable-ship[data-size="3"] {\r\n    width: 32px;\r\n    height: 96px;\r\n    outline: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\n.draggable-ship.vertical[data-size="3"] {\r\n    width: 96px;\r\n    height: 32px;\r\n    outline: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\n.draggable-ship[data-size="4"] {\r\n    width: 32px;\r\n    height: 128px;\r\n    outline: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\n.draggable-ship.vertical[data-size="4"] {\r\n    width: 128px;\r\n    height: 32px;\r\n    outline: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\nh3.title {\r\n    grid-area: 1 / 2;\r\n}\r\n\r\n#player1Grid, #player2Grid, #computerGrid {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 32px);\r\n    grid-template-rows: repeat(10, 32px);\r\n    grid-gap: 2px;\r\n    background-color: lightblue;\r\n    border: 2px solid lightblue;\r\n\r\n    grid-area: 2 / 2;\r\n    height: max-content;\r\n    \r\n}\r\n\r\n#player1GridOverlay, #player2GridOverlay, #computerGridOverlay {\r\n    padding-left: 1em;\r\n    padding-right: 1em;\r\n    color: rgb(237, 233, 233);\r\n}\r\n\r\n.grid-containers {\r\n    display: flex;\r\n    gap: 2em;\r\n    justify-content: space-evenly;\r\n}\r\n\r\nh1 {\r\n    text-align: center;\r\n}\r\n\r\n/* ONLY colour player grid */\r\n.ship-present.reveal {\r\n    outline: 2px solid darkblue;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.start-button-container{\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: 32px;\r\n}\r\n\r\n.start-button, .reset-btn, .randomise-btn, .confirm-btn, .horizontal-or-vertical-btn {\r\n    font-size: large;\r\n    padding: 4px 8px;\r\n}\r\n\r\n.horizontal-or-vertical-btn {\r\n    min-width: 134.67px\r\n}\r\n\r\nh3 {\r\n    text-align: center;\r\n}\r\n\r\n/* GRID CONTAINERS */\r\n.player1-grid-container, .player2-grid-container, .computer-grid-container {\r\n    position: relative;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr;\r\n    grid-template-rows: auto 1fr auto;\r\n    gap: 1em;\r\n\r\n    padding-right: 1em; /* Keeps the athestetic with the overlay even */\r\n}\r\n\r\n.btn-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    grid-area: 3 / 1 / 3 / -1;\r\n}\r\n\r\n.grid-overlay {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black overlay */\r\n    display: none; /* Initially hidden */\r\n}\r\n\r\n.ship-present.reveal.sunk {\r\n    outline: 2px solid red;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.draggable-ship.sunk {\r\n    outline: 2px solid red;\r\n}\r\n\r\n.draggable-ship.placing {\r\n    outline: 2px solid rgb(38, 209, 38);\r\n}\r\n\r\n.draggable-ship.invisible {\r\n    outline: 2px solid white;\r\n}\r\n\r\n\r\n/* COLOURS FOR SPAN\'S IN TURN TEXT */\r\n/* HIT */\r\n.highlighted.red {\r\n    color: lightcoral;\r\n}\r\n\r\n/* SUNK */\r\n.highlighted.orange {\r\n    color: orange;\r\n}\r\n\r\n/* MISSED */\r\n.highlighted.blue {\r\n    color: lightskyblue;\r\n}\r\n\r\n/* PLACING */\r\n.highlighted.green {\r\n    color: rgb(38, 209, 38);\r\n}'],sourceRoot:""}]);const s=o},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);r&&o[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),e.push(A))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},o=[],s=0;s<n.length;s++){var l=n[s],d=r.base?l[0]+r.base:l[0],A=a[d]||0,c="".concat(d," ").concat(A);a[d]=A+1;var p=t(c),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var u=i(h,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:u,references:1})}o.push(c)}return o}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var a=r(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=t(a[o]);e[s].references--}for(var l=r(n,i),d=0;d<a.length;d++){var A=t(a[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},681:(n,e,t)=>{var r=t(72),i=t.n(r),a=t(825),o=t.n(a),s=t(659),l=t.n(s),d=t(56),A=t.n(d),c=t(540),p=t.n(c),h=t(113),u=t.n(h),g=t(365),m={};m.styleTagTransform=u(),m.setAttributes=A(),m.insert=l().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=p(),i()(g.A,m),g.A&&g.A.locals&&g.A.locals;class b{constructor(n,e=!1,t=0,r=!1){this.length=n,this.placed=e,this.hits=t,this.sunk=r}hit(){return this.hits++,this.isSunk(),this}isSunk(){return this.hits===this.length&&(this.sunk=!0),this}}const f=()=>{const n=(()=>{const n=Array.from({length:10},(()=>Array(10).fill(null))),e=Array.from({length:10},(()=>Array(10).fill(null))),t=[];function r(){const e=[];for(let t=0;t<=9;t++)for(let r=0;r<=9;r++)null==n[t][r]||e.includes(n[t][r])||e.push(n[t][r]);return e}return{board:n,missed:e,positionShips:function(e){if(null===e)return void console.log("Need to provide coordinates");let r;for(r of e){let e;const[i,a,o,s]=r;if(i===a&&o===s)e=new b(1,!0),n[o][i]=e;else if(i===a){const t=s-o+1;e=new b(t,!0);for(let r=0;r<t;r++)n[o+r][i]=e}else{if(o!==s)throw Error;{const t=a-i+1;e=new b(t,!0);for(let r=0;r<t;r++)n[o][i+r]=e}}t.push(e)}},recieveAttack:function([t,r]){null!=n[r][t]?n[r][t].hit():e[r][t]="X"},allShipsSunk:function(){return t.every((n=>!0===n.sunk))},ships:t,allShipsPlaced:function(){const n=[4,3,3,2,2,2,1,1,1,1],e=r();for(const t of e){const e=n.indexOf(t.length);if(-1===e)return!1;n.splice(e,1)}return 0===n.length&&e.every((n=>!0===n.placed))},obtainCurrentShips:r}})();let e,t=null,r="HORIZONTAL",i=null,a=null,o=null;const s={vertical:["beneath","above"],horizontal:["left","right"]};function l(){document.querySelector(`.${this.name}-grid.game-board`).innerHTML=""}function d(){n.ships.length=0}function A(n=null){const e=document.getElementById(`${this.name}GridOverlay`);this.showOverlay(!0),e.innerHTML='\n            <h3 class="rules-title">RULES</h3>\n            <p>Try and deduce where the enemy ships are and sink them first!</p>\n            <br></br>\n            <p>Each player deploys their ships (of lengths varying from 1 to 4 squares) secretly on a their square grid.</p>\n            <p>Every turn each player shoots at the other\'s grid by clicking on a location to a response of "HIT", "MISS" or "SUNK".</p>\n            <p>(Watch the turn counter beneath the title if you get lost)</p>\n            <p>First player to sink all of the opponents ships wins! Good Luck!</p>\n        ',n&&(e.innerHTML='\n            <h3 class="rules-title">RULES</h3>\n            <p>Try and deduce where the enemy ships are and sink them first!</p>\n            <br></br>\n            <p>Each player deploys their ships (of lengths varying from 1 to 4 squares) secretly on a their square grid.</p>\n            <p>Every turn each player shoots at the other\'s grid by clicking on a location to a response of "HIT", "MISS" or "SUNK".</p>\n            <p>(Watch the turn counter beneath the title if you get lost)</p>\n            <p>First player to sink all of the opponents ships wins! Good Luck!</p>\n            <br></br>\n            <p>Local play requires the opponent to not look at the screen whilst the other player is positioning their ships!</p>\n        ')}function c(){const n=document.querySelector(`.${this.name}-grid-container`),e=n.querySelector(".btn-container");n.removeChild(e)}function p(){const n=document.createElement("div");n.classList.add("ships-container"),n.innerHTML='\n        <div class="ship-container-1">\n            <div class="draggable-ship" data-size="4"></div>\n            <div class="draggable-ship" data-size="3"></div>\n            <div class="draggable-ship" data-size="3"></div>\n        </div>\n        <div class="ship-container-2">\n            <div class="draggable-ship" data-size="2"></div>\n            <div class="draggable-ship" data-size="2"></div>\n            <div class="draggable-ship" data-size="2"></div>\n        </div>\n        <div class="ship-container-3">\n            <div class="draggable-ship" data-size="1"></div>\n            <div class="draggable-ship" data-size="1"></div>\n            <div class="draggable-ship" data-size="1"></div>\n            <div class="draggable-ship" data-size="1"></div>\n        </div>\n        ';const t=document.querySelector(`.${this.name}-grid-container`);t.insertAdjacentElement("afterbegin",n),e=[...t.querySelectorAll(".draggable-ship")]}function h(){const n=document.querySelector(`.${this.name}-grid-container`),e=n.querySelector(".ships-container");e&&n.removeChild(e)}function u(){document.querySelectorAll(`.${this.name}-grid.game-board.number`).forEach((n=>{n.classList.contains("reveal")&&(n.classList.remove("reveal"),n.classList.add("hidden"))}))}function g(n=0){e.length>0&&(t=e[n%e.length],t.classList.add("placing"))}function m(){function i(n,e,t){let i=!0,o=[];if(r=document.querySelector(`.${this.name}.horizontal-or-vertical-btn`).textContent,"HORIZONTAL"===r)for(let r=0;r<t;r++){let t=k.bind(this)(n,e+r);t&&o.push(t),!0===a(n,e+r)&&(i=!1)}else if("VERTICAL"===r)for(let r=0;r<t;r++){let t=k.bind(this)(n+r,e);t&&o.push(t),!0===a(n+r,e)&&(i=!1)}return[i,o]}function a(e,t){return e>9||t>9||null!=n.board[e][t]||null!=n.missed[e][t]}function o(e,t){const r=x(e,t);for(let e of r){let t=e[0],r=e[1];null===n.missed[r][t]&&n.recieveAttack([t,r])}}g(),e.forEach((n=>{n.addEventListener("mousedown",A)}));const s=n=>{if(n.preventDefault(),e.length>0){const[e,r]=B.bind(this)(n.target),a=parseInt(t.dataset.size);let[o,s]=i.bind(this)(e,r,a);if(!0===o)for(let n of s)n.classList.add("highlight");else for(let n of s)n.classList.add("not-valid")}};function l(n){let e=document.querySelectorAll(".highlight");0===e.length&&(e=document.querySelectorAll(".not-valid")),e.forEach((n=>{n.classList.remove("highlight","not-valid","shaking-animation")}))}const d=a=>{if(a.preventDefault(),e.length>0){const[s,l]=B.bind(this)(a.target),d=parseInt(t.dataset.size);let A=s,c=s,p=l,h=l,[u,m]=i.bind(this)(s,l,d);if(u){for(let n of m)n.classList.add("ship-present","reveal"),n.classList.remove("highlight");if("HORIZONTAL"===r){h=l+d-1,n.positionShips([[p,h,A,c]]);for(let n=0;n<d;n++)o.bind(this)(l+n,s)}else if("VERTICAL"===r){c=s+d-1,n.positionShips([[p,h,A,c]]);for(let n=0;n<d;n++)o.bind(this)(l,s+n)}!function(){for(let n=0;n<e.length;n++)if(t===e[n]){e[n].classList.add("invisible"),e.splice(n,1),g(n);break}}()}else for(let n of m)n.classList.add("shaking-animation","not-valid"),n.addEventListener("animationend",(()=>{n.classList.remove("shaking-animation")}),{once:!0})}};function A(n){t&&t.classList.remove("placing"),t=n.target,n.target.classList.add("placing")}document.querySelectorAll(`.${this.name}-grid.game-board.number`).forEach((n=>{n.addEventListener("mouseenter",s),n.addEventListener("mouseleave",l),n.addEventListener("mousedown",d)}))}function f(n){for(let t=0;t<e.length;t++){const r=parseInt(e[t].dataset.size);if(n.length===r){e[t].classList.add("sunk"),e.splice(t,1);break}}}function C(){for(let e=0;e<=9;e++)for(let t=0;t<=9;t++)n.missed[t][e]=null}function y(n){I.bind(this)(n)}function I(n){""===n.textContent&&(n.classList.contains("ship-present")?(n.textContent="X",T(`${this.opponent.name.toUpperCase()} <span class="highlighted red">HIT</span>`),n.classList.contains("hidden")&&(n.classList.remove("hidden"),n.classList.add("reveal"))):(n.textContent="●",T(`${this.opponent.name.toUpperCase()} <span class="highlighted blue">MISSED</span>`),this.showOverlay(!0),this.opponent.showOverlay(!1),n.id="hit","computer"===this.name&&(a?G.bind(this)():w.bind(this)())),E.bind(this)(n))}function v(n){const[e,t]=B(n);return this.opponent.gameboard.board[e][t].sunk}function B(n){const e=n.getAttribute("class");for(let n of e.split(" "))if("0123456789".includes(n[0]))return[parseInt(n[0]),parseInt(n[1])]}function E(e){if(!n)return;const[t,r]=B(e);n.recieveAttack([r,t]),null!=n.board[t][r]&&n.board[t][r].sunk&&(T(`${this.opponent.name.toUpperCase()} <span class="highlighted orange">SANK</span> ONE OF ${this.name.toUpperCase()}'S SHIP`),L(n.board,r,t,new Set).forEach((n=>{let e=parseInt(n[1]),t=parseInt(n[0]);k.bind(this)(t,e).classList.add("sunk"),S.bind(this)(e,t)})),f.bind(this)(n.board[t][r]),n.allShipsSunk()&&D.bind(this)())}function S(e,t,r=null){const i=x(e,t);for(let e of i){let t=e[0],i=e[1];if(null===n.missed[i][t]){n.recieveAttack.bind(this)([t,i]);const e=k.bind(this)(i,t);e.textContent="●",e.id="revealedMiss","computer"===this.opponent.name&&O(e,r)}}}function x(e,t){const r=[];for(let i=t-1;i<=t+1;i++)for(let t=e-1;t<=e+1;t++)Math.min(t,i)<0||Math.max(t,i)>9||null!=n.board[i][t]||r.push([t,i]);return r}function k(n,e){const t=document.getElementById(this.name+"Grid").querySelectorAll("*");let r=null;return t.forEach((t=>{t.classList.contains(`${n}${e}`)&&(r=t)})),r}function L(n,e,t,r){if(!(r.has(`${t}${e}`)||Math.max(e,t)>9||Math.min(e,t)<0||null===n[t][e]))return r.add(`${t}${e}`),L(n,e+1,t,r),L(n,e-1,t,r),L(n,e,t+1,r),L(n,e,t-1,r),r}function T(n){document.querySelector(".turn-text").innerHTML=n}async function w(){let n=await Math.floor(Math.random()*i.length);for(;n>=i.length;)n=await Math.floor(Math.random()*i.length);const e=await i[n];i.splice(n,1);let t=await Math.max(150,500*Math.random());await new Promise((n=>setTimeout(n,t))),M.bind(this)(e)}function O(n,e){for(let t=0;t<e.length;t++)if(e[t]===n){e.splice(t,1);break}}function M(n,e=!1){n.classList.contains("ship-present")?(n.textContent="X",T('COMPUTER <span class="highlighted red">HIT</span>'),R.bind(this)(n),i.length>0&&(v.bind(this)(n)?w.bind(this)():G.bind(this)(n,e))):(n.textContent="●",T('COMPUTER <span class="highlighted blue">MISSED</span>'),R.bind(this)(n),this.showOverlay(!1),this.opponent.showOverlay(!0),n.id="hit")}function R(e){if(!n)return;const[t,r]=B(e);this.opponent.gameboard.recieveAttack([r,t]),null!=this.opponent.gameboard.board[t][r]&&this.opponent.gameboard.board[t][r].sunk&&(T(`COMPUTER <span class="highlighted orange">SANK</span> ONE OF ${this.opponent.name.toUpperCase()}'S SHIP`),a=null,o=null,L(this.opponent.gameboard.board,r,t,new Set).forEach((n=>{let e=parseInt(n[1]),t=parseInt(n[0]);this.opponent.gridDivFromCoordinates(t,e).classList.add("sunk"),this.opponent.nearbyShipSquaresHit(e,t,i)})),this.opponent.updateClassListOnShipSunk(this.opponent.gameboard.board[t][r]),this.opponent.gameboard.allShipsSunk()&&D.bind(this)())}async function G(n=null,e=!1){if(a){if(e){const t=H(n);for(let n in t)a[n]=t[n];!function(n){o||(o=q.bind(this)(n));for(const n in a)s[o].includes(n)||delete a[n]}(e)}}else a=H(n);let t=await Math.max(150,500*Math.random());await new Promise((n=>setTimeout(n,t)));const[r,l]=P.bind(this)(a);O(r,i),M.bind(this)(r,l)}function H(n){const[e,t]=B(n),r=[[e+1,t,"beneath"],[e-1,t,"above"],[e,t+1,"right"],[e,t-1,"left"]],i={};for(let n of r){let[e,t,r]=n;const a=N(t,e);a&&(i[r]=a)}return i}function N(n,e){let t=null;return i.forEach((r=>{r.classList.contains(`${e}${n}`)&&(t=r)})),t}function P(n){const e=Object.keys(n)[0],t=n[e];return delete n[e],[t,e]}function q(n){return o="above"===n||"beneath"===n?"vertical":"horizontal",o}function z(){Array.from(document.querySelectorAll(".game-board.number")).forEach((n=>{n.removeEventListener("click",n._boundClickHandler)}))}function D(){const n=document.getElementById("gameEndingOverlay");n.style.display="flex",i&&(i.length=0),z.bind(this)();const e=document.querySelector(".winner-confirmation");let t;t=this.gameboard.allShipsSunk()?this.opponent.name:this.name,e.textContent=`Congratulations ${t.toUpperCase()} wins!        `,document.querySelector(".reset-btn").addEventListener("click",(()=>{n.style.display="none",document.querySelector(".grid-containers").innerHTML="",d.bind(this)(),this.opponent.resetShipsArray()}))}return{buildHTMLGrid:function(e){const t=document.getElementById(this.name+"Grid");for(let r=0;r<=9;r++)for(let i=0;i<=9;i++){const a=document.createElement("div");a.classList=`${t.classList} number ${r}${i}`,null!=n.board[r][i]&&(a.classList.add("ship-present"),e?a.classList.add("reveal"):a.classList.add("hidden")),t.appendChild(a)}},showOverlay:function(n,e=this.name){document.getElementById(e+"GridOverlay").style.display=n?"block":"none"},registerGridDivEventListener:function(){document.getElementById(this.name+"Grid").querySelectorAll("*").forEach((n=>{const e=y.bind(this,n);n._boundClickHandler=e,n.addEventListener("click",e)}))},buildHTMLDivContainers:function(){const n=document.querySelector(".grid-containers"),e=document.createElement("div");e.classList.add(`${this.name}-grid-container`),e.id=`${this.name}Container`,e.innerHTML=`\n        <h3 class="${this.name} title">${this.name.toUpperCase()}</h3>\n                <div class="${this.name}-grid game-board" id="${this.name}Grid">\n\n                </div>\n                <div class="grid-overlay" id="${this.name}GridOverlay"></div>\n        `,n.appendChild(e)},computerGuess:w,opponent:null,generateComputerGuesses:function(){i=[],document.getElementById(`${this.opponent.name}Grid`).querySelectorAll("*").forEach((n=>{i.push(n)}))},positionShips:n.positionShips,allShipsSunk:n.allShipsSunk,allShipsPlaced:n.allShipsPlaced,gameboard:n,gridDivFromCoordinates:k,nearbyShipSquaresHit:S,potentialComputerGuesses:i,buildShips:p,applyDraggableShips:m,buildButtonContainer:function(){const n=document.createElement("div");n.classList.add("btn-container");const e=document.createElement("button");e.classList.add(`${this.name}`,"horizontal-or-vertical-btn"),e.textContent="HORIZONTAL";const t=document.createElement("button");t.classList.add(`${this.name}`,"randomise-btn"),t.textContent="RANDOMISE";const r=document.createElement("button");r.classList.add(`${this.name}`,"confirm-btn"),r.textContent="CONFIRM";const i=document.createElement("button");i.classList.add(`${this.name}`,"reset-btn"),i.textContent="RESET",n.appendChild(e),n.appendChild(t),n.appendChild(i),n.appendChild(r),document.querySelector(`.${this.name}-grid.game-board`).insertAdjacentElement("afterend",n)},resetGrid:function(){for(let e=0;e<=9;e++)for(let t=0;t<=9;t++)n.board[e][t]=null,n.missed[e][t]=null;l.bind(this)(),d.bind(this)()},removeShips:h,removeButtons:c,hideGridShips:u,updateTurnText:T,updateClassListOnShipSunk:f,buildRules:A,removeRules:function(){const n=document.getElementById(`${this.name}GridOverlay`);this.showOverlay(!1),n.innerHTML=""},toggleShipsInvisible:function(){e.forEach((n=>{n.classList.add("invisible"),n.classList.remove("placing")}))},resetShips:function(){h.bind(this)(),p.bind(this)(),m.bind(this)()},resetHTMLGrid:l,progressFromShipPlacement:function(n){"computer"===this.opponent.name?(c.bind(this)(),h.bind(this)(),C(),this.opponent.removeRules()):"player2TurnStart"===n?(A.bind(this)(!0),h.bind(this)(),C(),this.opponent.removeRules(),this.opponent.buildShips(),this.opponent.applyDraggableShips()):"player2TurnFinish"===n&&(this.opponent.removeRules(),this.opponent.removeButtons(),h.bind(this)(),c.bind(this)(),C(),this.opponent.hideGridShips(),u.bind(this)())},resetShipsArray:d,planeOfPlacingShip:r}};let C=[];class y{constructor(n,e=0,t=!1){this.length=n,this.hits=e,this.sunk=t}}function I(n){if(null===n)return void console.log("Need to provide coordinates");let e;const[t,r,i,a]=n;if(t===r&&i===a)e=new y(1),C[i][t]=e;else if(t===r){const n=a-i+1;e=new y(n);for(let r=0;r<n;r++)C[i+r][t]=e}else{if(i!==a)throw Error;{const n=r-t+1;e=new y(n);for(let r=0;r<n;r++)C[i][t+r]=e}}}function v(n,e){const t=function(n,e){const t=[];for(let r=e-1;r<=e+1;r++)for(let e=n-1;e<=n+1;e++)Math.min(e,r)<0||Math.max(e,r)>9||null!=C[r][e]||t.push([e,r]);return t}(n,e);for(let n of t){const e=n[0],t=n[1];null===C[t][e]&&(C[t][e]="Nearby")}}async function B(){C=Array.from({length:10},(()=>Array(10).fill(null)));const n=["horizontal","vertical"],e=[{length:4},{length:3},{length:3},{length:2},{length:2},{length:2},{length:1},{length:1},{length:1},{length:1}],t=[];for(let r of e){let e=Math.round(Math.random());r.direction=n[e];let i,a,o,s,l=!1;for(;!l;){if("horizontal"===r.direction){let n=Math.round(9*Math.random());o=n,s=n,i=Math.round(9*Math.random()),a=i+(r.length-1),a>9&&(a=i,i=a-(r.length-1));let e=!1;for(let n=i;n<=a;n++)if(null!=C[o][n]){e=!0;break}if(e)continue}else{let n=Math.round(9*Math.random());i=n,a=n,o=Math.round(9*Math.random()),s=o+(r.length-1),s>9&&(s=o,o=s-(r.length-1));let e=!1;for(let n=o;n<=s;n++)if(null!=C[n][i]){e=!0;break}if(e)continue}if(await I([i,a,o,s]),"horizontal"===r.direction)for(let n=i;n<=a;n++)await v(n,o);else for(let n=o;n<=s;n++)await v(i,n);t.push([i,a,o,s]),l=!0}}return t}function E(n,e,t){n.classList.contains("player1"),n.textContent="HORIZONTAL"===n.textContent?"VERTICAL":"HORIZONTAL"}async function S(n,e,t){const r=await B();n.classList.contains("player1")?(e.resetGrid(),e.positionShips(r),e.buildHTMLGrid(!0),e.toggleShipsInvisible()):(t.resetGrid(),t.positionShips(r),t.buildHTMLGrid(!0),t.toggleShipsInvisible())}function x(n,e,t){n.classList.contains("player1")?(e.resetGrid(),e.buildHTMLGrid(!0),e.resetShips()):(t.resetGrid(),t.buildHTMLGrid(!0),t.resetShips())}function k(n,e=!1){let t;t=e?[document.querySelector("#player1GridOverlay"),document.querySelector("#computerGridOverlay")]:[document.querySelector("#player1GridOverlay"),document.querySelector("#player2GridOverlay")],"blue"===n?t.forEach((n=>{n.style.backgroundColor="rgb(73, 110, 235)"})):"partially-transparent"===n&&t.forEach((n=>{n.style.backgroundColor="rgba(0, 0, 0, 0.5)"}))}!async function n(){let e=await function(){const n=document.getElementById("overallOverlay");n.style.display="block";const e=document.createElement("div");e.classList.add("centered-container"),e.innerHTML='\n        <h1 class="welcome-title">WELCOME TO BATTLESHIPS:</h1>\n        <div class="player-selection">\n            <h3>PLAYER</h3>\n            <h3>VS</h3>\n            <div class="player-selection-container">\n                <div class="player-2-btn-container">\n                    <button class="player-2-btn">PLAYER</button>\n                </div>\n                <div class="computer-btn-container">\n                    <button class="computer-btn">COMPUTER</button>\n                </div>\n            </div>\n            <div class="player-selection-overlay"></div>            \n        </div>\n        ',n.appendChild(e);const t=document.querySelector(".player-2-btn"),r=document.querySelector(".computer-btn"),i=new Promise(((e,r)=>{t.addEventListener("click",(()=>{console.log("PLAYER BUTTON PRESSED"),n.innerHTML="",n.style.display="none",e("player")}))})),a=new Promise(((e,t)=>{r.addEventListener("click",(()=>{console.log("COMPUTER BUTTON PRESSED"),n.innerHTML="",n.style.display="none",e("computer")}))}));return Promise.any([i,a])}();"player"===e&&(e="player2");const t=f();t.name="player1";const r=f();r.name=`${e}`,t.buildHTMLDivContainers(),r.buildHTMLDivContainers(),t.opponent=r,r.opponent=t,t.updateTurnText(`${t.name.toUpperCase()} <span class="highlighted green">PLACE YOUR SHIPS</span>`),t.buildHTMLGrid(!0),t.buildShips(),t.applyDraggableShips(),"computer"===r.name?(r.buildRules(),t.buildButtonContainer(),r.buildHTMLGrid(!1),k("blue",!0)):(r.buildRules(!0),t.buildButtonContainer(),r.buildButtonContainer(),r.buildHTMLGrid(!0));const i=document.querySelectorAll(".horizontal-or-vertical-btn");for(const n of i)n.onclick=()=>E(n);const a=document.querySelectorAll(".randomise-btn");for(const n of a)n.onclick=()=>S(n,t,r);const o=document.querySelectorAll(".reset-btn");for(const n of o)n.onclick=()=>x(n,t,r);if(await async function(n,e){"computer"===e.name?await function(n,e){const t=document.querySelector(".player1.confirm-btn");let r;return new Promise((e=>{r=e,t.onclick=()=>{n.allShipsPlaced()&&(n.progressFromShipPlacement(),k("partially-transparent",!0),e())}}))}(n):await function(n,e){k("blue"),document.querySelector(".player1.confirm-btn").onclick=()=>{n.allShipsPlaced()&&(n.progressFromShipPlacement("player2TurnStart"),e.updateTurnText(`${e.name.toUpperCase()} <span class="highlighted green">PLACE YOUR SHIPS</span>`))};const t=document.querySelector(".player2.confirm-btn");let r;return new Promise((n=>{r=n,t.onclick=()=>{e.allShipsPlaced()&&(e.progressFromShipPlacement("player2TurnFinish"),k("partially-transparent"),n())}}))}(n,e)}(t,r),"computer"===r.name){r.resetGrid(),r.generateComputerGuesses();const n=await B();r.positionShips(n),r.buildHTMLGrid(!1)}else t.resetHTMLGrid(),t.buildHTMLGrid(),r.resetHTMLGrid(),r.buildHTMLGrid(),t.registerGridDivEventListener();t.buildShips(),r.buildShips(),r.registerGridDivEventListener();let s=function(n){let e=Math.random(),t=Math.round(e),r=n[t].name;return document.querySelector(".turn-text").textContent=`${r.toUpperCase()} GOES FIRST`,n[t]}([t,r]);s.showOverlay(!0),"computer"===s.name&&(console.log("COMPUTER GUESSED FIRST"),r.computerGuess()),document.querySelector(".reset-btn").addEventListener("click",n)}()}},n=>{n(n.s=681)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
