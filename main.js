"use strict";(self.webpackChunkbattleships=self.webpackChunkbattleships||[]).push([[792],{365:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),i=t.n(r),a=t(314),o=t.n(a)()(i());o.push([n.id,":root {\n    --distance: 0; /* Variable for animation of the gridOverlay's */\n  }\n\nbody {\n    user-select: none;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\n\nheader {\n    display: grid;\n    grid-template-columns: 1fr auto;\n}\n\nh1.title, .winner-confirmation {\n    text-align: center;\n    color: rgb(73, 110, 235);\n}\n\n.player1-winning-counter {\n    position: relative;\n    left: 45%;\n    grid-area: 1 / 2;\n    color: rgb(38, 209, 38);\n}\n\n.player2-winning-counter, .computer-winning-counter {\n    position: relative;\n    right: 45%;\n    grid-area: 1 / 2;\n    color: rgb(38, 209, 38);\n}\n\n.player1-grid.number, .player2-grid.number, .computer-grid.number {\n    background-color: white;\n    color: black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.centered-container {\n    display: grid;\n    grid-template-rows: 2fr auto 3fr;\n    height: 100%; \n    background-color: rgb(255, 255, 255);\n\n    gap: 2em;\n}\n\n.game-rules-btn {\n    position: absolute;\n    left: 90%;\n    top: 3.4%;\n\n    color: rgb(73, 110, 235);\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n    font-size: large;\n    padding: 4px 8px;\n}\n\n.game-rules-overlay {\n    text-align: center;\n}\n\n.rules-load-in {\n    animation: fadeIn 1s ease;\n    animation-iteration-count: 1;\n}\n\n@keyframes fadeIn {\n    0% {\n        opacity: 0;\n        transform: translateY(50%); /* Slide in from bottom */\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n\n.rules-load-out {\n    animation: fadeOut 1s ease;\n    animation-iteration-count: 1;\n}\n\n@keyframes fadeOut {\n    0% { \n        transform: translateY(0);\n        opacity: 1;\n    }\n    100% { \n        transform: translateY(50%);  /* Slide out from bottom */\n        opacity: 0;\n    }\n}\n\n.game-rules-title {\n    color: rgb(73, 110, 235);\n}\n\n#gameEndingOverlay {\n    display: none;\n    background-color: lightblue;\n    flex-direction: column;\n    height: auto;\n\n}\n\n.reset-btn-div, .refresh-btn-div {\n    text-align: center;\n    padding: 16px;\n}\n\n.game-end-btn-container {\n    display: flex;\n    justify-content: center;\n}\n\n.welcome-title {\n    display: flex;\n    flex: 4;\n    justify-content: center;\n    align-items: flex-end;\n\n    color: rgb(73, 110, 235);\n}\n\n.player-selection {\n    display: flex;\n    justify-content: center;\n    gap: 2em;\n    background-color: rgb(255, 255, 255);\n    /* height: 100%; */\n    width: 100%;\n    flex: 5;\n    align-items: flex-start;\n}\n\n.player-selection-container {\n    display: flex;\n    gap: 1em;\n    flex-direction: column;\n}\n\n.player-2-btn-container, .computer-btn-container {\n    display: flex;\n    justify-content: center;\n}\n\n.player-2-btn, .computer-btn{\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n    font-size: large;\n}\n\n#hit, #revealedMiss {\n    background-color: #bbb2b279;\n}\n\n#revealedMiss {\n    color: rgb(118, 115, 115);\n}\n\n.player1-grid.number.ship-present, .player2-grid.number.ship-present, .computer-grid.number.ship-present {\n    color: red;\n}\n\n/* SHIP PLACING */\ndiv.player1-grid.number.highlight, div.player2-grid.number.highlight, div.computer-grid.number.highlight {\n    /* CHOSE BORDER AS IT IS EASIER TO SEE WHEN PLACING */\n    border: 2px solid rgb(38, 209, 38);\n}\n\ndiv.player1-grid.number.not-valid, div.player2-grid.number.not-valid {\n    /* APPLYING BORDER ALLOWS USER TO DETERMINE WHAT IS BEHIND THE CURSOR\n    NECESSARY TO REDUCE WIDTH AND HEIGHT BY BORDER FOR NO BUGS */\n    border: 2px solid red;\n    width: 28px;\n    height: 28px;\n}\n\n.shaking-animation {\n    animation-name: shakeAnimation;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n}\n\n@keyframes shakeAnimation {\n    0% { transform: translateX(0); }\n    15% { transform: translateX(-5px); }\n    30% { transform: translateX(5px); }\n    45% { transform: translateX(-5px); }\n    60% { transform: translateX(5px); }\n    75% { transform: translateX(-5px); }\n    100% { transform: translateX(0); }\n  }\n\n\n/* DRAGGABLE SHIPS */\n.ship-container-1, .ship-container-2, .ship-container-3 {\n    display: grid;\n    align-items: end;\n}\n\n.ships-container {\n    display: flex;\n    gap: 1em;\n    grid-area: 1 / 1 / -2 / 1;\n    padding: 1em;\n}\n\n.inside-ship {\n    width: 32px;\n    height: 32px;\n    border: 2px solid darkblue;\n    position: relative;\n}\n\n.draggable-ship[data-size=\"1\"] {\n    width: 32px;\n    height: 32px;\n    outline: 2px solid darkblue;\n    position: relative;\n}\n\n.draggable-ship[data-size=\"2\"] {\n    width: 32px;\n    height: 64px;\n    outline: 2px solid darkblue;\n}\n\n.draggable-ship[data-size=\"3\"] {\n    width: 32px;\n    height: 96px;\n    outline: 2px solid darkblue;\n}\n\n.draggable-ship[data-size=\"4\"] {\n    width: 32px;\n    height: 128px;\n    outline: 2px solid darkblue;\n}\n\n\nh3.title {\n    grid-area: 1 / 2;\n}\n\n#player1Grid, #player2Grid, #computerGrid {\n    display: grid;\n    grid-template-columns: repeat(10, 32px);\n    grid-template-rows: repeat(10, 32px);\n    grid-gap: 2px;\n    background-color: lightblue;\n    border: 2px solid lightblue;\n\n    grid-area: 2 / 2;\n    height: max-content;\n    \n}\n\n#player1GridOverlay, #player2GridOverlay, #computerGridOverlay {\n    padding-left: 1em;\n    padding-right: 1em;\n    color: rgb(237, 233, 233);\n}\n\n.grid-containers {\n    display: flex;\n    gap: 2em;\n    justify-content: space-evenly;\n}\n\n/* ONLY colour player grid */\n.ship-present.reveal {\n    outline: 2px solid darkblue;\n    width: 100%;\n    height: 100%;\n    font-size: x-large;\n}\n\n.start-button-container{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 32px;\n\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\n\n.start-button, .reset-btn, .randomise-btn, .confirm-btn, .horizontal-or-vertical-btn, .refresh-btn {\n    font-size: large;\n    padding: 4px 8px;\n\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\n\n.placing-div {\n    font-size: large;\n    color: rgb(73, 110, 235);\n    display: flex;\n    align-items: center;\n}\n\n.horizontal-or-vertical-btn {\n    min-width: 134.67px\n}\n\nh3 {\n    text-align: center;\n}\n\n.confirm-btn.denied {\n    animation: denied 0.25s;\n    animation-iteration-count: 1;\n}\n\n@keyframes denied {\n    0% { transform: translateX(0); \n        color: rgb(129, 0, 0);}\n    15% { transform: translateX(-5px); }\n    30% { transform: translateX(5px);\n        color: rgb(255, 0, 0); }\n    45% { transform: translateX(-5px); }\n    60% { transform: translateX(5px);\n        color: rgb(255, 0, 0); }\n    75% { transform: translateX(-5px); }\n    100% { transform: translateX(0); \n        color: rgb(129, 0, 0);}\n    0% {\n        color: rgb(129, 0, 0);\n    }\n\n    35% {\n        color: rgb(255, 0, 0);\n    }\n\n    65% {\n        color: rgb(255, 0, 0);\n    }\n\n    100% {\n        color: rgb(129, 0, 0);\n    }\n}\n\n/* GRID CONTAINERS */\n.player1-grid-container, .player2-grid-container, .computer-grid-container {\n    /* position: relative NEEDED TO CONTAIN OVERLAY to just the grid container*/\n    position: relative;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: auto 1fr auto;\n    gap: 1em;\n\n    padding-right: 1em; /* Keeps the athestetic with the overlay even */\n    z-index: auto;\n\n}\n\n.btn-container {\n    display: flex;\n    justify-content: space-between;\n    grid-area: 3 / 1 / 3 / -1;\n}\n\n.grid-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black overlay */\n    display: none; /* Initially hidden */\n}\n\n.ship-present.reveal.sunk {\n    outline: 2px solid red;\n    width: 100%;\n    height: 100%;\n}\n\n.draggable-ship.sunk {\n    outline: 2px solid red;\n}\n\n.draggable-ship.placing {\n    outline: 2px solid rgb(38, 209, 38);\n}\n\n.draggable-ship.invisible {\n    outline: 2px solid white;\n}\n\n\n/* COLOURS FOR SPAN'S IN TURN TEXT */\n/* HIT */\n.highlighted.red {\n    color: lightcoral;\n}\n\n/* SUNK */\n.highlighted.orange {\n    color: orange;\n}\n\n/* MISSED */\n.highlighted.blue {\n    color: lightskyblue;\n}\n\n/* PLACING */\n.highlighted.green {\n    color: rgb(38, 209, 38);\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:[":root {\r\n    --distance: 0; /* Variable for animation of the gridOverlay's */\r\n  }\r\n\r\nbody {\r\n    user-select: none;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n\r\nheader {\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n}\r\n\r\nh1.title, .winner-confirmation {\r\n    text-align: center;\r\n    color: rgb(73, 110, 235);\r\n}\r\n\r\n.player1-winning-counter {\r\n    position: relative;\r\n    left: 45%;\r\n    grid-area: 1 / 2;\r\n    color: rgb(38, 209, 38);\r\n}\r\n\r\n.player2-winning-counter, .computer-winning-counter {\r\n    position: relative;\r\n    right: 45%;\r\n    grid-area: 1 / 2;\r\n    color: rgb(38, 209, 38);\r\n}\r\n\r\n.player1-grid.number, .player2-grid.number, .computer-grid.number {\r\n    background-color: white;\r\n    color: black;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.centered-container {\r\n    display: grid;\r\n    grid-template-rows: 2fr auto 3fr;\r\n    height: 100%; \r\n    background-color: rgb(255, 255, 255);\r\n\r\n    gap: 2em;\r\n}\r\n\r\n.game-rules-btn {\r\n    position: absolute;\r\n    left: 90%;\r\n    top: 3.4%;\r\n\r\n    color: rgb(73, 110, 235);\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    font-size: large;\r\n    padding: 4px 8px;\r\n}\r\n\r\n.game-rules-overlay {\r\n    text-align: center;\r\n}\r\n\r\n.rules-load-in {\r\n    animation: fadeIn 1s ease;\r\n    animation-iteration-count: 1;\r\n}\r\n\r\n@keyframes fadeIn {\r\n    0% {\r\n        opacity: 0;\r\n        transform: translateY(50%); /* Slide in from bottom */\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n    }\r\n}\r\n\r\n\r\n.rules-load-out {\r\n    animation: fadeOut 1s ease;\r\n    animation-iteration-count: 1;\r\n}\r\n\r\n@keyframes fadeOut {\r\n    0% { \r\n        transform: translateY(0);\r\n        opacity: 1;\r\n    }\r\n    100% { \r\n        transform: translateY(50%);  /* Slide out from bottom */\r\n        opacity: 0;\r\n    }\r\n}\r\n\r\n.game-rules-title {\r\n    color: rgb(73, 110, 235);\r\n}\r\n\r\n#gameEndingOverlay {\r\n    display: none;\r\n    background-color: lightblue;\r\n    flex-direction: column;\r\n    height: auto;\r\n\r\n}\r\n\r\n.reset-btn-div, .refresh-btn-div {\r\n    text-align: center;\r\n    padding: 16px;\r\n}\r\n\r\n.game-end-btn-container {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.welcome-title {\r\n    display: flex;\r\n    flex: 4;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n\r\n    color: rgb(73, 110, 235);\r\n}\r\n\r\n.player-selection {\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 2em;\r\n    background-color: rgb(255, 255, 255);\r\n    /* height: 100%; */\r\n    width: 100%;\r\n    flex: 5;\r\n    align-items: flex-start;\r\n}\r\n\r\n.player-selection-container {\r\n    display: flex;\r\n    gap: 1em;\r\n    flex-direction: column;\r\n}\r\n\r\n.player-2-btn-container, .computer-btn-container {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.player-2-btn, .computer-btn{\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    font-size: large;\r\n}\r\n\r\n#hit, #revealedMiss {\r\n    background-color: #bbb2b279;\r\n}\r\n\r\n#revealedMiss {\r\n    color: rgb(118, 115, 115);\r\n}\r\n\r\n.player1-grid.number.ship-present, .player2-grid.number.ship-present, .computer-grid.number.ship-present {\r\n    color: red;\r\n}\r\n\r\n/* SHIP PLACING */\r\ndiv.player1-grid.number.highlight, div.player2-grid.number.highlight, div.computer-grid.number.highlight {\r\n    /* CHOSE BORDER AS IT IS EASIER TO SEE WHEN PLACING */\r\n    border: 2px solid rgb(38, 209, 38);\r\n}\r\n\r\ndiv.player1-grid.number.not-valid, div.player2-grid.number.not-valid {\r\n    /* APPLYING BORDER ALLOWS USER TO DETERMINE WHAT IS BEHIND THE CURSOR\r\n    NECESSARY TO REDUCE WIDTH AND HEIGHT BY BORDER FOR NO BUGS */\r\n    border: 2px solid red;\r\n    width: 28px;\r\n    height: 28px;\r\n}\r\n\r\n.shaking-animation {\r\n    animation-name: shakeAnimation;\r\n    animation-duration: 0.25s;\r\n    animation-iteration-count: 1;\r\n}\r\n\r\n@keyframes shakeAnimation {\r\n    0% { transform: translateX(0); }\r\n    15% { transform: translateX(-5px); }\r\n    30% { transform: translateX(5px); }\r\n    45% { transform: translateX(-5px); }\r\n    60% { transform: translateX(5px); }\r\n    75% { transform: translateX(-5px); }\r\n    100% { transform: translateX(0); }\r\n  }\r\n\r\n\r\n/* DRAGGABLE SHIPS */\r\n.ship-container-1, .ship-container-2, .ship-container-3 {\r\n    display: grid;\r\n    align-items: end;\r\n}\r\n\r\n.ships-container {\r\n    display: flex;\r\n    gap: 1em;\r\n    grid-area: 1 / 1 / -2 / 1;\r\n    padding: 1em;\r\n}\r\n\r\n.inside-ship {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\n.draggable-ship[data-size=\"1\"] {\r\n    width: 32px;\r\n    height: 32px;\r\n    outline: 2px solid darkblue;\r\n    position: relative;\r\n}\r\n\r\n.draggable-ship[data-size=\"2\"] {\r\n    width: 32px;\r\n    height: 64px;\r\n    outline: 2px solid darkblue;\r\n}\r\n\r\n.draggable-ship[data-size=\"3\"] {\r\n    width: 32px;\r\n    height: 96px;\r\n    outline: 2px solid darkblue;\r\n}\r\n\r\n.draggable-ship[data-size=\"4\"] {\r\n    width: 32px;\r\n    height: 128px;\r\n    outline: 2px solid darkblue;\r\n}\r\n\r\n\r\nh3.title {\r\n    grid-area: 1 / 2;\r\n}\r\n\r\n#player1Grid, #player2Grid, #computerGrid {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 32px);\r\n    grid-template-rows: repeat(10, 32px);\r\n    grid-gap: 2px;\r\n    background-color: lightblue;\r\n    border: 2px solid lightblue;\r\n\r\n    grid-area: 2 / 2;\r\n    height: max-content;\r\n    \r\n}\r\n\r\n#player1GridOverlay, #player2GridOverlay, #computerGridOverlay {\r\n    padding-left: 1em;\r\n    padding-right: 1em;\r\n    color: rgb(237, 233, 233);\r\n}\r\n\r\n.grid-containers {\r\n    display: flex;\r\n    gap: 2em;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n/* ONLY colour player grid */\r\n.ship-present.reveal {\r\n    outline: 2px solid darkblue;\r\n    width: 100%;\r\n    height: 100%;\r\n    font-size: x-large;\r\n}\r\n\r\n.start-button-container{\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: 32px;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n\r\n.start-button, .reset-btn, .randomise-btn, .confirm-btn, .horizontal-or-vertical-btn, .refresh-btn {\r\n    font-size: large;\r\n    padding: 4px 8px;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n\r\n.placing-div {\r\n    font-size: large;\r\n    color: rgb(73, 110, 235);\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.horizontal-or-vertical-btn {\r\n    min-width: 134.67px\r\n}\r\n\r\nh3 {\r\n    text-align: center;\r\n}\r\n\r\n.confirm-btn.denied {\r\n    animation: denied 0.25s;\r\n    animation-iteration-count: 1;\r\n}\r\n\r\n@keyframes denied {\r\n    0% { transform: translateX(0); \r\n        color: rgb(129, 0, 0);}\r\n    15% { transform: translateX(-5px); }\r\n    30% { transform: translateX(5px);\r\n        color: rgb(255, 0, 0); }\r\n    45% { transform: translateX(-5px); }\r\n    60% { transform: translateX(5px);\r\n        color: rgb(255, 0, 0); }\r\n    75% { transform: translateX(-5px); }\r\n    100% { transform: translateX(0); \r\n        color: rgb(129, 0, 0);}\r\n    0% {\r\n        color: rgb(129, 0, 0);\r\n    }\r\n\r\n    35% {\r\n        color: rgb(255, 0, 0);\r\n    }\r\n\r\n    65% {\r\n        color: rgb(255, 0, 0);\r\n    }\r\n\r\n    100% {\r\n        color: rgb(129, 0, 0);\r\n    }\r\n}\r\n\r\n/* GRID CONTAINERS */\r\n.player1-grid-container, .player2-grid-container, .computer-grid-container {\r\n    /* position: relative NEEDED TO CONTAIN OVERLAY to just the grid container*/\r\n    position: relative;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr;\r\n    grid-template-rows: auto 1fr auto;\r\n    gap: 1em;\r\n\r\n    padding-right: 1em; /* Keeps the athestetic with the overlay even */\r\n    z-index: auto;\r\n\r\n}\r\n\r\n.btn-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    grid-area: 3 / 1 / 3 / -1;\r\n}\r\n\r\n.grid-overlay {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black overlay */\r\n    display: none; /* Initially hidden */\r\n}\r\n\r\n.ship-present.reveal.sunk {\r\n    outline: 2px solid red;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.draggable-ship.sunk {\r\n    outline: 2px solid red;\r\n}\r\n\r\n.draggable-ship.placing {\r\n    outline: 2px solid rgb(38, 209, 38);\r\n}\r\n\r\n.draggable-ship.invisible {\r\n    outline: 2px solid white;\r\n}\r\n\r\n\r\n/* COLOURS FOR SPAN'S IN TURN TEXT */\r\n/* HIT */\r\n.highlighted.red {\r\n    color: lightcoral;\r\n}\r\n\r\n/* SUNK */\r\n.highlighted.orange {\r\n    color: orange;\r\n}\r\n\r\n/* MISSED */\r\n.highlighted.blue {\r\n    color: lightskyblue;\r\n}\r\n\r\n/* PLACING */\r\n.highlighted.green {\r\n    color: rgb(38, 209, 38);\r\n}"],sourceRoot:""}]);const s=o},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);r&&o[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},o=[],s=0;s<n.length;s++){var l=n[s],A=r.base?l[0]+r.base:l[0],d=a[A]||0,c="".concat(A," ").concat(d);a[A]=d+1;var p=t(c),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=i(u,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:h,references:1})}o.push(c)}return o}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var a=r(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=t(a[o]);e[s].references--}for(var l=r(n,i),A=0;A<a.length;A++){var d=t(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=l}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},681:(n,e,t)=>{var r=t(72),i=t.n(r),a=t(825),o=t.n(a),s=t(659),l=t.n(s),A=t(56),d=t.n(A),c=t(540),p=t.n(c),u=t(113),h=t.n(u),g=t(365),m={};m.styleTagTransform=h(),m.setAttributes=d(),m.insert=l().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=p(),i()(g.A,m),g.A&&g.A.locals&&g.A.locals;class f{constructor(n,e=!1,t=0,r=!1){this.length=n,this.placed=e,this.hits=t,this.sunk=r}hit(){return this.hits++,this.isSunk(),this}isSunk(){return this.hits===this.length&&(this.sunk=!0),this}}const C=()=>{const n=(()=>{const n=Array.from({length:10},(()=>Array(10).fill(null))),e=Array.from({length:10},(()=>Array(10).fill(null))),t=[];function r(){const e=[];for(let t=0;t<=9;t++)for(let r=0;r<=9;r++)null==n[t][r]||e.includes(n[t][r])||e.push(n[t][r]);return e}return{board:n,missed:e,positionShips:function(e){if(null===e)return void console.log("Need to provide coordinates");let r;for(r of e){let e;const[i,a,o,s]=r;if(i===a&&o===s)e=new f(1,!0),n[o][i]=e;else if(i===a){const t=s-o+1;e=new f(t,!0);for(let r=0;r<t;r++)n[o+r][i]=e}else{if(o!==s)throw Error;{const t=a-i+1;e=new f(t,!0);for(let r=0;r<t;r++)n[o][i+r]=e}}t.push(e)}},recieveAttack:function([t,r]){null!=n[r][t]?n[r][t].hit():e[r][t]="X"},allShipsSunk:function(){return t.every((n=>!0===n.sunk))},ships:t,allShipsPlaced:function(){const n=[4,3,3,2,2,2,1,1,1,1],e=r();for(const t of e){const e=n.indexOf(t.length);if(-1===e)return!1;n.splice(e,1)}return 0===n.length&&e.every((n=>!0===n.placed))},obtainCurrentShips:r}})();let e,t=null,r=null,i="HORIZONTAL",a=null,o=null,s=null;const l={vertical:["beneath","above"],horizontal:["left","right"]};function A(){document.querySelector(`.${this.name}-grid.game-board`).innerHTML=""}function d(){n.ships.length=0}function c(){const n=document.getElementById(`${this.name}GridOverlay`);this.showOverlay(!0),n.innerHTML='\n            <h3 class="rules-title">RULES FOR SHIP PLACEMENT</h3>\n            <p>Click on the grid to place your ships! </p>\n            <p>You can <strong>change the ship</strong> you want to place by <strong>clicking on another</strong>.</p>\n            <p><span class="highlighted green"><strong>Legal</strong></span> placements highlight <strong><span class="highlighted green">green</span></strong>. <span class="highlighted red"><strong>Illegal</strong></span> placements highlight <span class="highlighted red"><strong>red</strong></span>.</p>\n            <p>You <strong>cannot place</strong> a ship within <strong>a square</strong> of an <strong>already placed ship</strong>, or if the ship <strong>length</strong> means it is positioned <strong>outside the grid</strong>.</p>\n            <br></br>\n            <p><strong>Button descriptions:</strong></p>\n            <p><strong>PLACING:</strong> Displays the <strong>current direction</strong> of the ship to be placed. <strong>Click</strong> the direction of the ship, HORIZONTAL / VERTICAL, to <strong>change</strong> the direction.</p>\n            <p><strong>RANDOMISE:</strong> Places all ships onto the board in a random manner.</p>\n            <p><strong>RESET:</strong> Removes all ships from the grid to the starting position.</p>\n        '}function p(){const n=document.querySelector(`.${this.name}-grid-container`),e=n.querySelector(".btn-container");n.removeChild(e)}function u(){const n=document.createElement("div");n.classList.add("ships-container"),n.innerHTML='\n        <div class="ship-container-1">\n            <div class="draggable-ship" data-size="4"></div> \n            <div class="draggable-ship" data-size="3"></div>\n            <div class="draggable-ship" data-size="3"></div>\n        </div>\n        <div class="ship-container-2">\n            <div class="draggable-ship" data-size="2"></div>\n            <div class="draggable-ship" data-size="2"></div>\n            <div class="draggable-ship" data-size="2"></div>\n        </div>\n        <div class="ship-container-3">\n            <div class="draggable-ship" data-size="1"></div>\n            <div class="draggable-ship" data-size="1"></div>\n            <div class="draggable-ship" data-size="1"></div>\n            <div class="draggable-ship" data-size="1"></div>\n        </div>\n        ';const t=document.querySelector(`.${this.name}-grid-container`);t.insertAdjacentElement("afterbegin",n),e=[...t.querySelectorAll(".draggable-ship")]}function h(){const n=document.querySelector(`.${this.name}-grid-container`),e=n.querySelector(".ships-container");e&&n.removeChild(e)}function g(){document.querySelectorAll(`.${this.name}-grid.game-board.number`).forEach((n=>{n.classList.contains("reveal")&&(n.classList.remove("reveal"),n.classList.add("hidden"))}))}function m(n=0){e.length>0&&(r=e[n%e.length],r.classList.add("placing"))}function C(){function t(n,e,t){let r=!0,o=[];if(i=document.querySelector(`.${this.name}.horizontal-or-vertical-btn`).textContent,"HORIZONTAL"===i)for(let i=0;i<t;i++){let t=k.bind(this)(n,e+i);t&&o.push(t),!0===a(n,e+i)&&(r=!1)}else if("VERTICAL"===i)for(let i=0;i<t;i++){let t=k.bind(this)(n+i,e);t&&o.push(t),!0===a(n+i,e)&&(r=!1)}return[r,o]}function a(e,t){return e>9||t>9||null!=n.board[e][t]||null!=n.missed[e][t]}function o(e,t){const r=L(e,t);for(let e of r){let t=e[0],r=e[1];null===n.missed[r][t]&&n.recieveAttack([t,r])}}m(),e.forEach((n=>{n.addEventListener("mousedown",d)}));const s=n=>{if(n.preventDefault(),e.length>0){const[e,i]=E.bind(this)(n.target),a=parseInt(r.dataset.size);let[o,s]=t.bind(this)(e,i,a);if(!0===o)for(let n of s)n.classList.add("highlight");else for(let n of s)n.classList.add("not-valid")}};function l(n){let e=document.querySelectorAll(".highlight");0===e.length&&(e=document.querySelectorAll(".not-valid")),e.forEach((n=>{n.classList.remove("highlight","not-valid","shaking-animation")}))}const A=a=>{if(a.preventDefault(),e.length>0){const[s,l]=E.bind(this)(a.target),A=parseInt(r.dataset.size);let d=s,c=s,p=l,u=l,[h,g]=t.bind(this)(s,l,A);if(h){for(let n of g)n.classList.add("ship-present","reveal"),n.classList.remove("highlight");if("HORIZONTAL"===i){u=l+A-1,n.positionShips([[p,u,d,c]]);for(let n=0;n<A;n++)o.bind(this)(l+n,s)}else if("VERTICAL"===i){c=s+A-1,n.positionShips([[p,u,d,c]]);for(let n=0;n<A;n++)o.bind(this)(l,s+n)}!function(){for(let n=0;n<e.length;n++)if(r===e[n]){e[n].classList.add("invisible"),e.splice(n,1),m(n);break}}()}else for(let n of g)n.classList.add("shaking-animation","not-valid"),n.addEventListener("animationend",(()=>{n.classList.remove("shaking-animation")}),{once:!0})}};function d(n){r&&r.classList.remove("placing"),r=n.target,n.target.classList.add("placing")}document.querySelectorAll(`.${this.name}-grid.game-board.number`).forEach((n=>{n.addEventListener("mouseenter",s),n.addEventListener("mouseleave",l),n.addEventListener("mousedown",A)}))}function b(n){for(let t=0;t<e.length;t++){const r=parseInt(e[t].dataset.size);if(n.length===r){e[t].classList.add("sunk"),e.splice(t,1);break}}}function B(){for(let e=0;e<=9;e++)for(let t=0;t<=9;t++)n.missed[t][e]=null}function I(n){y.bind(this)(n)}function y(n){""===n.textContent&&(n.classList.contains("ship-present")?(n.textContent="X",T(`${this.opponent.name.toUpperCase()} <span class="highlighted red">HIT</span>`),n.classList.contains("hidden")&&(n.classList.remove("hidden"),n.classList.add("reveal"))):(n.textContent="●",T(`${this.opponent.name.toUpperCase()} <span class="highlighted blue">MISSED</span>`),this.showOverlay(!0),this.opponent.showOverlay(!1),n.id="hit","computer"===this.name&&(o?q.bind(this)():O.bind(this)())),S.bind(this)(n))}function v(n){const[e,t]=E(n);return this.opponent.gameboard.board[e][t].sunk}function E(n){const e=n.getAttribute("class");for(let n of e.split(" "))if("0123456789".includes(n[0]))return[parseInt(n[0]),parseInt(n[1])]}function S(e){if(!n)return;const[t,r]=E(e);n.recieveAttack([r,t]),null!=n.board[t][r]&&n.board[t][r].sunk&&(T(`${this.opponent.name.toUpperCase()} <span class="highlighted orange">SANK</span> ONE OF ${this.name.toUpperCase()}'S SHIP`),w(n.board,r,t,new Set).forEach((n=>{let e=parseInt(n[1]),t=parseInt(n[0]);k.bind(this)(t,e).classList.add("sunk"),x.bind(this)(e,t)})),b.bind(this)(n.board[t][r]),n.allShipsSunk()&&D.bind(this)())}function x(e,t,r=null){const i=L(e,t);for(let e of i){let t=e[0],i=e[1];if(null===n.missed[i][t]){n.recieveAttack.bind(this)([t,i]);const e=k.bind(this)(i,t);e.textContent="●",e.id="revealedMiss","computer"===this.opponent.name&&M(e,r)}}}function L(e,t){const r=[];for(let i=t-1;i<=t+1;i++)for(let t=e-1;t<=e+1;t++)Math.min(t,i)<0||Math.max(t,i)>9||null!=n.board[i][t]||r.push([t,i]);return r}function k(n,e){const t=document.getElementById(this.name+"Grid").querySelectorAll("*");let r=null;return t.forEach((t=>{t.classList.contains(`${n}${e}`)&&(r=t)})),r}function w(n,e,t,r){if(!(r.has(`${t}${e}`)||Math.max(e,t)>9||Math.min(e,t)<0||null===n[t][e]))return r.add(`${t}${e}`),w(n,e+1,t,r),w(n,e-1,t,r),w(n,e,t+1,r),w(n,e,t-1,r),r}function T(n){document.querySelector(".turn-text").innerHTML=n}async function O(){let n=await Math.floor(Math.random()*a.length);for(;n>=a.length;)n=await Math.floor(Math.random()*a.length);const e=await a[n];a.splice(n,1);let t=await Math.max(150,500*Math.random());await new Promise((n=>setTimeout(n,t))),G.bind(this)(e)}function M(n,e){for(let t=0;t<e.length;t++)if(e[t]===n){e.splice(t,1);break}}function G(n,e=!1){n.classList.contains("ship-present")?(n.textContent="X",T('COMPUTER <span class="highlighted red">HIT</span>'),R.bind(this)(n),a.length>0&&(v.bind(this)(n)?O.bind(this)():q.bind(this)(n,e))):(n.textContent="●",T('COMPUTER <span class="highlighted blue">MISSED</span>'),R.bind(this)(n),this.showOverlay(!1),this.opponent.showOverlay(!0),n.id="hit")}function R(e){if(!n)return;const[t,r]=E(e);this.opponent.gameboard.recieveAttack([r,t]),null!=this.opponent.gameboard.board[t][r]&&this.opponent.gameboard.board[t][r].sunk&&(T(`COMPUTER <span class="highlighted orange">SANK</span> ONE OF ${this.opponent.name.toUpperCase()}'S SHIP`),o=null,s=null,w(this.opponent.gameboard.board,r,t,new Set).forEach((n=>{let e=parseInt(n[1]),t=parseInt(n[0]);this.opponent.gridDivFromCoordinates(t,e).classList.add("sunk"),this.opponent.nearbyShipSquaresHit(e,t,a)})),this.opponent.updateClassListOnShipSunk(this.opponent.gameboard.board[t][r]),this.opponent.gameboard.allShipsSunk()&&D.bind(this)())}async function q(n=null,e=!1){if(o){if(e){const t=H(n);for(let n in t)o[n]=t[n];!function(n){s||(s=P.bind(this)(n));for(const n in o)l[s].includes(n)||delete o[n]}(e)}}else o=H(n);let t=await Math.max(150,500*Math.random());await new Promise((n=>setTimeout(n,t)));const[r,i]=U.bind(this)(o);M(r,a),G.bind(this)(r,i)}function H(n){const[e,t]=E(n),r=[[e+1,t,"beneath"],[e-1,t,"above"],[e,t+1,"right"],[e,t-1,"left"]],i={};for(let n of r){let[e,t,r]=n;const a=N(t,e);a&&(i[r]=a)}return i}function N(n,e){let t=null;return a.forEach((r=>{r.classList.contains(`${e}${n}`)&&(t=r)})),t}function U(n){const e=Object.keys(n)[0],t=n[e];return delete n[e],[t,e]}function P(n){return s="above"===n||"beneath"===n?"vertical":"horizontal",s}function z(){Array.from(document.querySelectorAll(".game-board.number")).forEach((n=>{n.removeEventListener("click",n._boundClickHandler)}))}function D(){document.getElementById("gameEndingOverlay").style.display="flex",a&&(a.length=0),z.bind(this)();const n=document.querySelector(".winner-confirmation");let e;this.gameboard.allShipsSunk()?(e=this.opponent.name,this.opponent.winningCounter++):(e=this.name,t++),n.textContent=`Congratulations ${e.toUpperCase()} wins!`;const r=document.querySelector(".current-score#gameEnd");"player1"===this.name?r.textContent=`${this.name.toUpperCase()}: ${this.winningCounter}     -     ${this.opponent.name.toUpperCase()}: ${this.opponent.winningCounter}`:r.textContent=`${this.opponent.name.toUpperCase()}: ${this.opponent.winningCounter}     -     ${this.name.toUpperCase()}: ${this.winningCounter}`}return{buildHTMLGrid:function(e){const t=document.getElementById(this.name+"Grid");for(let r=0;r<=9;r++)for(let i=0;i<=9;i++){const a=document.createElement("div");a.classList=`${t.classList} number ${r}${i}`,null!=n.board[r][i]&&(a.classList.add("ship-present"),e?a.classList.add("reveal"):a.classList.add("hidden")),t.appendChild(a)}},showOverlay:function(n,e=this.name){document.getElementById(e+"GridOverlay").style.display=n?"block":"none"},registerGridDivEventListener:function(){document.getElementById(this.name+"Grid").querySelectorAll("*").forEach((n=>{const e=I.bind(this,n);n._boundClickHandler=e,n.addEventListener("click",e)}))},buildHTMLDivContainers:function(){const n=document.querySelector(".grid-containers"),e=document.createElement("div");e.classList.add(`${this.name}-grid-container`),e.id=`${this.name}Container`,e.innerHTML=`\n        <h3 class="${this.name} title">${this.name.toUpperCase()}</h3>\n        <h3 class="${this.name}-winning-counter">${this.winningCounter}</h3>\n        <div class="${this.name}-grid game-board" id="${this.name}Grid"></div>\n        <div class="grid-overlay" id="${this.name}GridOverlay"></div>\n        `,n.appendChild(e)},computerGuess:O,opponent:null,generateComputerGuesses:function(){a=[],document.getElementById(`${this.opponent.name}Grid`).querySelectorAll("*").forEach((n=>{a.push(n)}))},positionShips:n.positionShips,allShipsSunk:n.allShipsSunk,allShipsPlaced:n.allShipsPlaced,gameboard:n,gridDivFromCoordinates:k,nearbyShipSquaresHit:x,potentialComputerGuesses:a,buildShips:u,applyDraggableShips:C,buildButtonContainer:function(){const n=document.createElement("div");n.classList.add("btn-container");const e=document.createElement("div");e.innerHTML="PLACING:",e.classList.add("placing-div");const t=document.createElement("button");t.classList.add(`${this.name}`,"horizontal-or-vertical-btn"),t.textContent="HORIZONTAL";const r=document.createElement("button");r.classList.add(`${this.name}`,"randomise-btn"),r.textContent="RANDOMISE";const i=document.createElement("button");i.classList.add(`${this.name}`,"confirm-btn"),i.textContent="CONFIRM";const a=document.createElement("button");a.classList.add(`${this.name}`,"reset-btn"),a.textContent="RESET",n.appendChild(e),n.appendChild(t),n.appendChild(r),n.appendChild(a),n.appendChild(i),document.querySelector(`.${this.name}-grid.game-board`).insertAdjacentElement("afterend",n)},resetGrid:function(){for(let e=0;e<=9;e++)for(let t=0;t<=9;t++)n.board[e][t]=null,n.missed[e][t]=null;A.bind(this)(),d.bind(this)()},removeShips:h,removeButtons:p,hideGridShips:g,updateTurnText:T,updateClassListOnShipSunk:b,buildRules:c,removeRules:function(){const n=document.getElementById(`${this.name}GridOverlay`);this.showOverlay(!1),n.innerHTML=""},toggleShipsInvisible:function(){e.forEach((n=>{n.classList.add("invisible"),n.classList.remove("placing")}))},resetShips:function(){h.bind(this)(),u.bind(this)(),C.bind(this)()},resetHTMLGrid:A,progressFromShipPlacement:function(n){"computer"===this.opponent.name?(p.bind(this)(),h.bind(this)(),B(),this.opponent.removeRules()):"player2TurnStart"===n?(c.bind(this)(),h.bind(this)(),B(),this.opponent.removeRules(),this.opponent.buildShips(),this.opponent.applyDraggableShips()):"player2TurnFinish"===n&&(this.opponent.removeRules(),this.opponent.removeButtons(),h.bind(this)(),p.bind(this)(),B(),this.opponent.hideGridShips(),g.bind(this)())},resetShipsArray:d,planeOfPlacingShip:i,winningCounter:t}};let b=[];class B{constructor(n,e=0,t=!1){this.length=n,this.hits=e,this.sunk=t}}function I(n){if(null===n)return void console.log("Need to provide coordinates");let e;const[t,r,i,a]=n;if(t===r&&i===a)e=new B(1),b[i][t]=e;else if(t===r){const n=a-i+1;e=new B(n);for(let r=0;r<n;r++)b[i+r][t]=e}else{if(i!==a)throw Error;{const n=r-t+1;e=new B(n);for(let r=0;r<n;r++)b[i][t+r]=e}}}function y(n,e){const t=function(n,e){const t=[];for(let r=e-1;r<=e+1;r++)for(let e=n-1;e<=n+1;e++)Math.min(e,r)<0||Math.max(e,r)>9||null!=b[r][e]||t.push([e,r]);return t}(n,e);for(let n of t){const e=n[0],t=n[1];null===b[t][e]&&(b[t][e]="Nearby")}}async function v(){b=Array.from({length:10},(()=>Array(10).fill(null)));const n=["horizontal","vertical"],e=[{length:4},{length:3},{length:3},{length:2},{length:2},{length:2},{length:1},{length:1},{length:1},{length:1}],t=[];for(let r of e){let e=Math.round(Math.random());r.direction=n[e];let i,a,o,s,l=!1;for(;!l;){if("horizontal"===r.direction){let n=Math.round(9*Math.random());o=n,s=n,i=Math.round(9*Math.random()),a=i+(r.length-1),a>9&&(a=i,i=a-(r.length-1));let e=!1;for(let n=i;n<=a;n++)if(null!=b[o][n]){e=!0;break}if(e)continue}else{let n=Math.round(9*Math.random());i=n,a=n,o=Math.round(9*Math.random()),s=o+(r.length-1),s>9&&(s=o,o=s-(r.length-1));let e=!1;for(let n=o;n<=s;n++)if(null!=b[n][i]){e=!0;break}if(e)continue}if(await I([i,a,o,s]),"horizontal"===r.direction)for(let n=i;n<=a;n++)await y(n,o);else for(let n=o;n<=s;n++)await y(i,n);t.push([i,a,o,s]),l=!0}}return t}function E(n,e,t){n.classList.contains("player1"),n.textContent="HORIZONTAL"===n.textContent?"VERTICAL":"HORIZONTAL"}async function S(n,e,t){const r=await v();n.classList.contains("player1")?(e.resetGrid(),e.positionShips(r),e.buildHTMLGrid(!0),e.toggleShipsInvisible()):(t.resetGrid(),t.positionShips(r),t.buildHTMLGrid(!0),t.toggleShipsInvisible())}function x(n,e,t){n.classList.contains("player1")?(e.resetGrid(),e.buildHTMLGrid(!0),e.resetShips()):(t.resetGrid(),t.buildHTMLGrid(!0),t.resetShips())}function L(n){const e=document.querySelector(`.${n.name}.confirm-btn`);e.classList.add("denied"),e.addEventListener("animationend",(()=>{e.classList.remove("denied")}))}function k(n,e=!1){let t;t=e?[document.querySelector("#player1GridOverlay"),document.querySelector("#computerGridOverlay")]:[document.querySelector("#player1GridOverlay"),document.querySelector("#player2GridOverlay")],"blue"===n?t.forEach((n=>{n.style.backgroundColor="rgb(73, 110, 235)"})):"partially-transparent"===n&&t.forEach((n=>{n.style.backgroundColor="rgba(0, 0, 0, 0.5)"}))}let w=null,T=null,O=null;!async function n(){null===O&&(O=await function(){const n=document.getElementById("overallOverlay");n.style.display="block";const e=document.createElement("div");e.classList.add("centered-container"),e.innerHTML='\n        <h1 class="welcome-title">WELCOME TO BATTLESHIPS:</h1>\n        <div class="player-selection">\n            <h3>PLAYER</h3>\n            <h3>VS</h3>\n            <div class="player-selection-container">\n                <div class="player-2-btn-container">\n                    <button class="player-2-btn">PLAYER</button>\n                </div>\n                <div class="computer-btn-container">\n                    <button class="computer-btn">COMPUTER</button>\n                </div>\n            </div>\n            <div class="player-selection-overlay"></div>            \n        </div>\n        <div class="game-rules-overlay" id="gameRulesOverlay">\n            <h3 class="game-rules-title">GAME RULES</h3>\n            <p>Try and work out where the enemy ships are and sink them first!</p>\n            <p>Each player places their ships, of 1 to 4 squares in size, secretly on a their square grid.</p>\n            <p>Player\'s take turns shooting at the opponents grid by clicking on a square to a response of "HIT", "MISS" or "SUNK".</p>\n            <p>First player to sink all of their opponents ships wins! Good Luck!</p>\n            <p>Player vs Player is local play which means the screen is shared.<p>\n            <p>Local play requires the opponent to not look at the screen whilst the other player is positioning their ships!</p>\n            <p>TIP: Watch the turn counter beneath the title if you get lost.</p>\n        </div>\n        ',n.appendChild(e);const t=document.querySelector(".player-2-btn"),r=document.querySelector(".computer-btn"),i=new Promise(((e,r)=>{t.addEventListener("click",(()=>{console.log("PLAYER BUTTON PRESSED"),n.innerHTML="",n.style.display="none",e("player")}))})),a=new Promise(((e,t)=>{r.addEventListener("click",(()=>{console.log("COMPUTER BUTTON PRESSED"),n.innerHTML="",n.style.display="none",e("computer")}))}));return Promise.any([i,a])}(),"player"===O&&(O="player2"),w=0,T=0,document.querySelector(".grid-containers").innerHTML="");const e=C();e.name="player1";const t=C();t.name=`${O}`,e.opponent=t,t.opponent=e,e.winningCounter=w,t.winningCounter=T,e.buildHTMLDivContainers(),t.buildHTMLDivContainers(),e.updateTurnText(`${e.name.toUpperCase()} <span class="highlighted green">PLACE YOUR SHIPS</span>`),e.buildHTMLGrid(!0),e.buildShips(),e.applyDraggableShips(),t.buildRules(),e.buildButtonContainer(),t.buildButtonContainer(),"computer"===t.name?(t.buildHTMLGrid(!1),k("blue",!0)):t.buildHTMLGrid(!0),document.querySelector(".game-rules-btn").addEventListener("click",(()=>{!function(){const n=document.querySelector(".game-rules-overlay"),e=document.querySelector("body");"none"===n.style.display?(n.style.display="block",e.style.overflow="hidden",n.classList.add("rules-load-in"),n.addEventListener("animationend",(()=>{n.classList.remove("rules-load-in"),e.style.overflow="auto"}),{once:!0})):(e.style.overflow="hidden",n.classList.add("rules-load-out"),n.addEventListener("animationend",(()=>{n.classList.remove("rules-load-out"),n.style.display="none",e.style.overflow="auto"}),{once:!0}))}()}));const r=document.querySelectorAll(".horizontal-or-vertical-btn");for(const n of r)n.onclick=()=>E(n);const i=document.querySelectorAll(".randomise-btn");for(const n of i)n.onclick=()=>S(n,e,t);const a=document.querySelectorAll(".reset-btn");for(const n of a)n.onclick=()=>x(n,e,t);if(await async function(n,e){"computer"===e.name?await function(n,e){const t=document.querySelector(".player1.confirm-btn");let r;return new Promise((i=>{r=i,t.onclick=()=>{n.allShipsPlaced()?(n.progressFromShipPlacement(),e.removeButtons(),k("partially-transparent",!0),i()):L(n)}}))}(n,e):await function(n,e){k("blue"),document.querySelector(".player1.confirm-btn").onclick=()=>{n.allShipsPlaced()?(n.progressFromShipPlacement("player2TurnStart"),e.updateTurnText(`${e.name.toUpperCase()} <span class="highlighted green">PLACE YOUR SHIPS</span>`)):L(n)};const t=document.querySelector(".player2.confirm-btn");let r;return new Promise((n=>{r=n,t.onclick=()=>{e.allShipsPlaced()?(e.progressFromShipPlacement("player2TurnFinish"),k("partially-transparent"),n()):L(e)}}))}(n,e)}(e,t),"computer"===t.name){t.resetGrid(),t.generateComputerGuesses();const n=await v();t.positionShips(n),t.buildHTMLGrid(!1)}else e.resetHTMLGrid(),e.buildHTMLGrid(),t.resetHTMLGrid(),t.buildHTMLGrid(),e.registerGridDivEventListener();e.buildShips(),t.buildShips(),t.registerGridDivEventListener();let o=function(n){let e=Math.random(),t=Math.round(e),r=n[t].name;return document.querySelector(".turn-text").textContent=`${r.toUpperCase()} GOES FIRST`,n[t]}([e,t]);o.showOverlay(!0),"computer"===o.name&&(console.log("COMPUTER GUESSED FIRST"),t.computerGuess()),document.querySelector(".reset-btn").addEventListener("click",(()=>{O=null,document.getElementById("gameEndingOverlay").style.display="none",document.querySelector(".grid-containers").innerHTML="",e.resetShipsArray(),t.resetShipsArray(),n()})),document.querySelector(".refresh-btn").addEventListener("click",(()=>{w=e.winningCounter,T=t.winningCounter,document.getElementById("gameEndingOverlay").style.display="none",document.querySelector(".grid-containers").innerHTML="",e.resetShipsArray(),t.resetShipsArray(),n()}))}()}},n=>{n(n.s=681)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,